#+Title: My dotfiles
#+Author: port19
#+Email: port19@port19.xyz
#+Description: 301 moved to emacs permanently
#+auto_tangle: t
#+OPTIONS: num:nil

_Note this file should reside in the home directory_

* Table of Contents :TOC:
- [[#pkgbuild][PKGBUILD]]
  - [[#bootstrapping][Bootstrapping]]
- [[#colors--fonts][Colors / Fonts]]
  - [[#doom-emacs][Doom Emacs]]
  - [[#awesome][Awesome]]
  - [[#qutebrowser][Qutebrowser]]
- [[#actual-configuraiton][Actual configuraiton]]
  - [[#doom-emacs-1][Doom Emacs]]
  - [[#awesome-1][Awesome]]
  - [[#qutebrowser-1][Qutebrowser]]
  - [[#zsh][Zsh]]

* PKGBUILD

#+begin_src conf :tangle PKGBUILD
# Maintainer: port19 <port19 at port19 dot xyz>
pkgname='port19-dotfiles-git'
_pkgname='dotfiles'
pkgver=r202.c417ff
pkgrel=1
pkgdesc='My dotfiles package. Superior to an install script.'
arch=('any')
url='https://git.sr.ht/~port19/dotfiles'
license=('Unlicense')
#+end_src

#+begin_src conf :tangle PKGBUILD
depends=(
'acpi'
'awesome'
'bat'
'brightnessctl'
'curl'
'dash'
'exa'
'flameshot'
'gnupg'
'htop'
'keepassxc'
'kitty'
'libnotify'
'libvterm'
'man-db'
'man-pages'
'mgba-qt'
'mpv'
'mupdf'
'neofetch'
'neovim'
'newsboat'
'openssh'
'pacman-contrib'
'pulsemixer'
'qutebrowser'
'ranger'
'slock'
'songrec'
'stow'
'ttc-iosevka'
'ttc-iosevka-aile'
'unzip'
'xclip'
'xorg-server'
'xorg-xinit'
'xorg-xkill'
'yt-dlp'
'zsh'
'zsh-completions'
)
makedepends=(
'git'
)
#+end_src

#+begin_src conf :tangle PKGBUILD
optdepends=(
'jdk11-openjdk: I hate java'
'mullvad-vpn-cli: the best vpn'
'signal-desktop: superior messenger'
'syncplay: watch video together'
'syncthing: share files'
'yay: aur helper'
)
#+end_src

#+begin_src conf :tangle PKGBUILD
source=('dotfiles::git+https://git.sr.ht/~port19/dotfiles')
md5sums=('SKIP')

pkgver() {
    cd "$srcdir/${_pkgname}"
    printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}
#+end_src

** TODO Bootstrapping

#+begin_src conf :tangle PKGBUILD
package() {
    cd "$srcdir/${_pkgname}/dots"
    find . -type d -exec mkdir -p -- $HOME/{} \;
    mkdir -p ~/.local/state/zsh
    touch ~/.local/state/zsh/history
    mkdir -p ~/.cache/zsh/zcompdump-5.9
    git clone --depth 1 https://github.com/zsh-users/zsh-autosuggestions $HOME/.config/zsh/zsh-autosuggestions || printf "zsh-autosuggestions already downloaded \n"
    cd ../../..
    stow -v dots
    echo 'echo "export ZDOTDIR=$HOME/.config/zsh" | sudo tee /etc/zsh/zshenv' | xclip -selection c
    printf "Finishing command pasted to your clipboard/n"
}
#+end_src

* Colors / Fonts

** Doom Emacs

#+begin_src elisp :tangle dots/.config/doom/config.el
(setq doom-font (font-spec :family "iosevka" :size 14)
      doom-variable-pitch-font (font-spec :family "iosevka aile" :size 14)
      doom-big-font (font-spec :family "iosevka" :size 28))
(setq doom-theme 'doom-gruvbox)

(setq display-line-numbers-type `relative)
(require 'org-superstar)
(add-hook 'org-mode-hook
      (lambda () (org-superstar-mode 1)))
#+end_src

** Awesome

#+begin_src sh :tangle dots/.xinitrc
exec awesome
#+end_src

#+begin_src lua :tangle dots/.config/awesome/rc.lua
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
local beautiful = require("beautiful")
local naughty = require("naughty")
local hotkeys_popup = require("awful.hotkeys_popup")

local theme = {}
theme.font          = "iosevka 10"
theme.bg_normal     = "#fdf1c7"
theme.bg_focus      = "#ebdbb2"
theme.bg_urgent     = "#fb4935"
theme.bg_minimize   = "#504945"
theme.fg_normal     = "#504945"
theme.fg_focus      = "#504945"
theme.fg_urgent     = "#fb4935"
theme.fg_minimize   = "#504945"
theme.useless_gap   = 0
theme.border_width  = 1
theme.border_normal = "#1d2021"
theme.border_focus  = "#8ec07c"
theme.wallpaper = "~/pic/Wallpapers/yellow-liquorstore.jpg"
beautiful.init(theme)
#+end_src

** Qutebrowser

#+begin_src python :tangle dots/.config/qutebrowser/config.py
c.fonts.default_family = "iosevka"
c.fonts.default_size = "12pt"
c.fonts.contextmenu = 'default_size default_family'
c.fonts.prompts = 'default_size default_family'

base00 = "#1d2021"
base01 = "#3c3836"
base02 = "#504945"
base03 = "#665c54"
base04 = "#bdae93"
base05 = "#d5c4a1"
base06 = "#ebdbb2"
base07 = "#fbf1c7"
base08 = "#fb4934"
base09 = "#fe8019"
base0A = "#fabd2f"
base0B = "#b8bb26"
base0C = "#8ec07c"
base0D = "#83a598"
base0E = "#d3869b"
base0F = "#d65d0e"

c.colors.completion.fg = base05
c.colors.completion.odd.bg = base01
c.colors.completion.even.bg = base00
c.colors.completion.category.fg = base0A
c.colors.completion.category.bg = base00
c.colors.completion.category.border.top = base00
c.colors.completion.category.border.bottom = base00
c.colors.completion.item.selected.fg = base05
c.colors.completion.item.selected.bg = base02
c.colors.completion.item.selected.border.top = base02
c.colors.completion.item.selected.border.bottom = base02
c.colors.completion.item.selected.match.fg = base0B
c.colors.completion.match.fg = base0B
c.colors.completion.scrollbar.fg = base05
c.colors.completion.scrollbar.bg = base00
c.colors.contextmenu.disabled.bg = base01
c.colors.contextmenu.disabled.fg = base04
c.colors.contextmenu.menu.bg = base00
c.colors.contextmenu.menu.fg =  base05
c.colors.contextmenu.selected.bg = base02
c.colors.contextmenu.selected.fg = base05
c.colors.downloads.bar.bg = base00
c.colors.downloads.start.fg = base00
c.colors.downloads.start.bg = base0D
c.colors.downloads.stop.fg = base00
c.colors.downloads.stop.bg = base0C
c.colors.downloads.error.fg = base08
c.colors.hints.fg = base00
c.colors.hints.bg = base0A
c.colors.hints.match.fg = base05
c.colors.keyhint.fg = base05
c.colors.keyhint.suffix.fg = base05
c.colors.keyhint.bg = base00
c.colors.messages.error.fg = base00
c.colors.messages.error.bg = base08
c.colors.messages.error.border = base08
c.colors.messages.warning.fg = base00
c.colors.messages.warning.bg = base0E
c.colors.messages.warning.border = base0E
c.colors.messages.info.fg = base05
c.colors.messages.info.bg = base00
c.colors.messages.info.border = base00
c.colors.prompts.fg = base05
c.colors.prompts.border = base00
c.colors.prompts.bg = base00
c.colors.prompts.selected.bg = base02
c.colors.statusbar.normal.fg = base0B
c.colors.statusbar.normal.bg = base00
c.colors.statusbar.insert.fg = base00
c.colors.statusbar.insert.bg = base0D
c.colors.statusbar.passthrough.fg = base00
c.colors.statusbar.passthrough.bg = base0C
c.colors.statusbar.private.fg = base00
c.colors.statusbar.private.bg = base01
c.colors.statusbar.command.fg = base05
c.colors.statusbar.command.bg = base00
c.colors.statusbar.command.private.fg = base05
c.colors.statusbar.command.private.bg = base00
c.colors.statusbar.caret.fg = base00
c.colors.statusbar.caret.bg = base0E
c.colors.statusbar.caret.selection.fg = base00
c.colors.statusbar.caret.selection.bg = base0D
c.colors.statusbar.progress.bg = base0D
c.colors.statusbar.url.fg = base05
c.colors.statusbar.url.error.fg = base08
c.colors.statusbar.url.hover.fg = base05
c.colors.statusbar.url.success.http.fg = base0C
c.colors.statusbar.url.success.https.fg = base0B
c.colors.statusbar.url.warn.fg = base0E
c.colors.tabs.bar.bg = base00
c.colors.tabs.indicator.start = base0D
c.colors.tabs.indicator.stop = base0C
c.colors.tabs.indicator.error = base08
c.colors.tabs.odd.fg = base05
c.colors.tabs.odd.bg = base01
c.colors.tabs.even.fg = base05
c.colors.tabs.even.bg = base00
c.colors.tabs.pinned.even.bg = base0C
c.colors.tabs.pinned.even.fg = base07
c.colors.tabs.pinned.odd.bg = base0B
c.colors.tabs.pinned.odd.fg = base07
c.colors.tabs.pinned.selected.even.bg = base02
c.colors.tabs.pinned.selected.even.fg = base05
c.colors.tabs.pinned.selected.odd.bg = base02
c.colors.tabs.pinned.selected.odd.fg = base05
c.colors.tabs.selected.odd.fg = base05
c.colors.tabs.selected.odd.bg = base02
c.colors.tabs.selected.even.fg = base05
c.colors.tabs.selected.even.bg = base02
#+end_src

* Actual configuraiton

** Doom Emacs

*** init

#+begin_src elisp :tangle dots/.config/doom/init.el
(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       (java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

*** config

**** Org tweaks

#+begin_src elisp :tangle dots/.config/doom/config.el
(setq org-directory "~/doc/")
(setq user-full-name "port19"
      user-mail-address "port19@port19.xyz")
 (add-hook 'org-mode-hook
      (lambda ()
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps '("\\.pdf\\'" . "mupdf %s"))
         ))
(require 'org-auto-tangle)
(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

**** Sciency stuff

#+begin_src elisp :tangle dots/.config/doom/config.el
(require 'org-ref)
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "bibtex %b"
         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
         "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        ))
(setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle")))
(setq bibtex-completion-bibliography '("~/doc/praxisarbeit/t1000.bib")
      bibtex-completion-display-formats
      '((book        . "${year:4} ${author:36} ${title:*}")
      (online      . "${year:4} ${institution:36} ${title:*} ${url:*}"))
      bibtex-completion-library-path '("~/doc/praxisarbeit/")
      bibtex-completion-pdf-open-function
      (lambda (fpath)
      (call-process "mupdf" nil 0 nil fpath))
      )
#+end_src

**** Clojure

#+begin_src elisp :tangle dots/.config/doom/config.el
(map! :after cider-mode :map clojure-mode-map :n "," #'cider-eval-last-sexp)
#+end_src

*** packages

#+begin_src elisp :tangle dots/.config/doom/packages.el
(package! org-bullets)
(package! org-superstar)
(package! org-ref)
(package! org-auto-tangle)
#+end_src

** Awesome

#+begin_src lua :tangle dots/.config/awesome/rc.lua
awful.layout.layouts = {
    awful.layout.suit.tile,
    awful.layout.suit.tile.top,
}

awful.screen.connect_for_each_screen(function(s)
    awful.tag({ "1", "2", "3", "4", "5" }, s, awful.layout.layouts[1])
    gears.wallpaper.maximized(beautiful.wallpaper, s, true)
end)

-- {{{ Key bindings
globalkeys = gears.table.join(
    -- Group Awesome
    awful.key({ "Mod4",           }, "k",     	hotkeys_popup.show_help, {description = "show keybindings", group = "awesome"}),
    awful.key({ "Mod4", "Control" }, "q", 	awesome.quit, 		 {description = "quit awesome", group = "awesome"}),
    awful.key({ "Mod4", "Control" }, "r", 	awesome.restart, 	 {description = "reload awesome", group = "awesome"}),
    awful.key({ "Mod4", "Control" }, "l",     	function () awful.spawn.with_shell("brightnessctl set 0% && slock && brightnessctl set 100%") end, {description = "lock screen", group = "awesome"}),

    -- Group Mediakeys
    awful.key({}, "XF86MonBrightnessUp", 	function () awful.spawn("brightnessctl set 10%+") end, {description = "raise brightness", group = "mediakey"}),
    awful.key({}, "XF86MonBrightnessDown", 	function () awful.spawn("brightnessctl set 10%-") end, {description = "lower brightness", group = "mediakey"}),

    -- Group Launcher
    awful.key({ "Mod4" 		  }, "q", 	function () awful.spawn("qutebrowser") end, {description = "qutebrowser", group = "launcher"}),
    awful.key({ "Mod4",           }, "Return", 	function () awful.spawn("kitty -1") end, {description = "launch terminal", group = "launcher"}),
    awful.key({ "Mod4",           }, "s",      	function () awful.spawn("flameshot gui") end, {description = "take a screenshot", group = "launcher"}),

    -- Group Layout
    awful.key({ "Mod4",           }, "l",     	function () awful.tag.incmwfact( 0.05)          end, {description = "increase master size", group = "layout"}),
    awful.key({ "Mod4",           }, "h",     	function () awful.tag.incmwfact(-0.05)          end, {description = "decrease master size", group = "layout"}),
    awful.key({ "Mod4",           }, "Tab", 	function () awful.layout.inc( 1)                end, {description = "select next layout", group = "layout"}),

    -- Group Tag
    awful.key({ "Mod4" 		  }, "1", 	function () awful.screen.focused().tags[1]:view_only() end, {description = "view tag 1", group = "tag"}),
    awful.key({ "Mod4" 		  }, "2", 	function () awful.screen.focused().tags[2]:view_only() end, {description = "view tag 2", group = "tag"}),
    awful.key({ "Mod4" 		  }, "3", 	function () awful.screen.focused().tags[3]:view_only() end, {description = "view tag 3", group = "tag"}),
    awful.key({ "Mod4" 		  }, "4", 	function () awful.screen.focused().tags[4]:view_only() end, {description = "view tag 4", group = "tag"}),
    awful.key({ "Mod4"		  }, "5", 	function () awful.screen.focused().tags[5]:view_only() end, {description = "view tag 5", group = "tag"}),
    awful.key({ "Mod4", "Shift"   }, "1", 	function () client.focus:move_to_tag(client.focus.screen.tags[1]) end, {description = "move focused client to tag 1", group = "tag"}),
    awful.key({ "Mod4", "Shift"   }, "2", 	function () client.focus:move_to_tag(client.focus.screen.tags[2]) end, {description = "move focused client to tag 2", group = "tag"}),
    awful.key({ "Mod4", "Shift"   }, "3", 	function () client.focus:move_to_tag(client.focus.screen.tags[3]) end, {description = "move focused client to tag 3", group = "tag"}),
    awful.key({ "Mod4", "Shift"   }, "4", 	function () client.focus:move_to_tag(client.focus.screen.tags[4]) end, {description = "move focused client to tag 4", group = "tag"}),
    awful.key({ "Mod4", "Shift"   }, "5", 	function () client.focus:move_to_tag(client.focus.screen.tags[5]) end, {description = "move focused client to tag 5", group = "tag"})
)

-- Group Client
clientkeys = gears.table.join(
    awful.key({ "Mod4", 	  }, "w",     	function (c) c:kill()                         		end, {description = "close", group = "client"}),
    awful.key({ "Mod4",           }, "space", 	function () awful.client.focus.byidx( 1) 		end, {description = "focus next by index", group = "client"}),
    awful.key({ "Mod4",           }, "f", 	function (c) c.fullscreen = not c.fullscreen c:raise() 	end, {description = "toggle fullscreen", group = "client"}),
    awful.key({ "Mod4",           }, "o",      	function (c) c:move_to_screen()               		end, {description = "move to next screen", group = "client"}),
    awful.key({ "Mod4", "Shift"   }, "space", 	function () awful.client.swap.byidx(  1)    		end, {description = "swap with next client by index", group = "client"}),
    awful.key({ "Mod4", "Shift"   }, "f",  	awful.client.floating.toggle                     	   , {description = "toggle floating", group = "client"}),
    awful.key({ "Mod4", "Shift"	  }, "o", 	function () awful.screen.focus_relative( 1) 		end, {description = "focus the next screen", group = "client"})
)


-- applies to floating windows
clientbuttons = gears.table.join(
    awful.button({ 	  }, 1, function (c) c:emit_signal("request::activate", "mouse_click", {raise = true}) end),
    awful.button({ "Mod4" }, 1, function (c) c:emit_signal("request::activate", "mouse_click", {raise = true}) awful.mouse.client.move(c) end),
    awful.button({ "Mod4" }, 3, function (c) c:emit_signal("request::activate", "mouse_click", {raise = true}) awful.mouse.client.resize(c) end)
)

root.keys(globalkeys)

-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "pinentry",
        },
        name = {
          "Event Tester",  -- xev.
        },
      }, properties = { floating = true }},

    { rule_any = {type = { "normal", "dialog" }
      }, properties = { titlebars_enabled = false }
    },

    -- Set Firefox to always map on the tag named "2" on screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { screen = 1, tag = "2" } },
}
-- }}}

-- {{{ Signals
client.connect_signal("manage", function (c)
    if awesome.startup
      and not c.size_hints.user_position
      and not c.size_hints.program_position then
        awful.placement.no_offscreen(c)
    end
end)
-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
    c:emit_signal("request::activate", "mouse_enter", {raise = false})
end)
client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

awful.spawn.with_shell("command -v emacs && pgrep -x emacs || emacs")
awful.spawn.with_shell('notify-send "$(checkupdates)"')
#+end_src

** Qutebrowser

*** General config

#+begin_src python :tangle dots/.config/qutebrowser/config.py
config.load_autoconfig(True)
c.completion.cmd_history_max_items = 0
c.completion.shrink = True
c.completion.timestamp_format = '%H:%M %d.%m'
c.completion.web_history.max_items = 500
c.confirm_quit = ['downloads']
c.content.canvas_reading = False #whatsapp web needs canvas for file upload
c.content.cookies.accept = 'no-3rdparty' #teams need 3rdparty cookies
c.content.cookies.store = False #doesn't support url patterns yet :sob:
c.content.fullscreen.overlay_timeout = 0
c.content.webrtc_ip_handling_policy = 'default-public-interface-only'
c.downloads.location.prompt = False
c.downloads.remove_finished = 1000
c.input.forward_unbound_keys = 'none'
c.keyhint.delay = 0
c.new_instance_open_target = 'tab-bg-silent'
c.scrolling.bar = 'never'
c.statusbar.widgets = ['keypress', 'scroll', 'progress']
c.tabs.last_close = 'default-page'
c.zoom.default = "100%"
c.downloads.location.directory = "~/dl"
#+end_src

*** Searx

#+begin_src python :tangle dots/.config/qutebrowser/config.py
c.url.default_page = 'https://search.bus-hit.me/'
c.url.start_pages = 'https://search.bus-hit.me/'
c.url.searchengines = {'DEFAULT':'https://search.bus-hit.me/?q={}'}
#+end_src

*** Custom Keybindings

#+begin_src python :tangle dots/.config/qutebrowser/config.py
config.bind(',m', 'hint links spawn mpv {hint-url}')
config.bind(',nv', 'hint links spawn mpv --no-video {hint-url}')
config.bind(',y', 'hint links spawn kitty -e yt-dlp {hint-url}')
config.bind(',a', 'hint links spawn kitty -e yt-dlp -f bestaudio {hint-url}')
config.bind(',cm', 'spawn mpv {url}')
config.bind(',cnv', 'spawn mpv --no-video {url}')
config.bind(',cy', 'spawn kitty -e yt-dlp {url}')
config.bind(',ca', 'spawn kitty -e yt-dlp -f bestaudio {url}')
config.bind(',r', 'restart')
config.bind(',xx', 'config-cycle statusbar.show always never;; config-cycle tabs.show always never')
config.bind('Sd', 'bookmark-del')
config.bind('SD', 'quickmark-del')
#+end_src

** Zsh

*** Envvars

#+begin_src sh :tangle dots/.config/zsh/.zprofile :mkdirp yes
export EDITOR='nvim'
export HISTFILE="$HOME/.local/state/zsh/history"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
startx
#+end_src

*** Shell options

#+begin_src sh :tangle dots/.config/zsh/.zshrc :mkdirp yes
SAVEHIST=1000000
HISTSIZE=$SAVEHIST
unsetopt beep
bindkey -v
#+end_src

*** Completion

#+begin_src sh :tangle dots/.config/zsh/.zshrc :mkdirp yes
zstyle :compinstall filename "$HOME/.config/zsh/.zshrc"
autoload -Uz compinit
compinit -d ~/.cache/zsh/zcompdump-5.9
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':completion:*:*:cdr:*:*' menu selection
source ~/.config/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
#+end_src

*** Prompt with vcs info

#+begin_src sh :tangle dots/.config/zsh/.zshrc :mkdirp yes
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' formats '%F{4}[%F{2}%b%F{4}]%u%c '
zstyle ':vcs_info:*' check-for-changes true
precmd () { vcs_info }
setopt PROMPT_SUBST
PS1='%F{4}%3~ ${vcs_info_msg_0_}%f$ '
#+end_src

*** Pastebin functions

#+begin_src sh :tangle dots/.config/zsh/.zshrc :mkdirp yes
pastebin() {
    curl --silent https://oshi.at -F f=@$* -F expire=120 \
    | grep DL \
    | cut -d " " -f 2 \
    | xclip -selection c \
    && echo "link copied to clipboard"
}

pastebinlong() {
    curl --silent https://oshi.at -F f=@$* \
    | grep DL \
    | cut -d " " -f 2 \
    | xclip -selection c \
    && echo "link copied to clipboard"
}
#+end_src

*** Aliases

#+begin_src sh :tangle dots/.config/zsh/.zshrc :mkdirp yes
alias v='nvim'
alias ls='exa'
alias la='exa -a'
alias ll='exa -la'
alias br='brightnessctl set 0 && read && brightnessctl set 100%'
alias vim='nvim'
alias cat='bat'
alias yta="yt-dlp --embed-thumbnail -f 'bestaudio/best' -f 'm4a'"
alias ytd="yt-dlp -f 'bestvideo[height<=?1080]+bestaudio/best' -f 'mp4'"
alias ytdd="yt-dlp -f 'bestvideo[height<=?720]+bestaudio/best' -f 'mp4'"
alias ytddd="yt-dlp -f 'bestvideo[height<=?480]+bestaudio/best' -f 'mp4'"
alias stamp='date +%d.%m.%y'
alias icat='kitty +kitten icat'
alias smpv='mpv "$(ls | shuf -n 1)"'
alias fmpv='mpv "$(fzf)"'
alias yank='xclip -selection c < '
alias song='ps "$(pgrep mpv)"'
alias tree='exa -a -I .git --tree'
alias rm='rm -I --preserve-root'
#+end_src

